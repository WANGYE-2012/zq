/***************************************************************************//**
*   @file          PlatFormService.hpp
*   @brief        综合交易平台(CTP)交易接口
*
*   @author     jacky <panxun.li@cithinc.com>
*   @version    0.0.1
*   @date       created on 2010/09/13
********************************************************************************/
#ifndef _PLATFORMSERVICE_HPP_
#define _PLATFORMSERVICE_HPP_

#include <string>
#include <set>
#include <map>
#include <list>
#include <vector>
using std::multimap;
using std::map;
using std::string;
using std::set;
using std::vector;


#include "ctp/ThostFtdcTraderApi.h"
#include "ctp/ThostFtdcMdApi.h"

#include "TraderSpi.hpp"
#include "QuotSpi.hpp"
#include "../Module-Misc2/BusinessData.hpp"
#include "platformSvr/ServiceProxy.hpp"
//#include "../Module-Misc2/PlatformStruct.h"



class CPackageCache;
class CDataCenter;
class zqWriteLog;


//下面定义交易所连接状态
enum CTPCONNSTATUS
{    
    CTPCONNSTATUS_Disconnected   =      0       ,            //未连接
    CTPCONNSTATUS_Connecting     =      1       ,            //正在连接
    CTPCONNSTATUS_Logining       =      2       ,            //正在登录
    CTPCONNSTATUS_LoginFailure   =      3       ,            //登录失败
    CTPCONNSTATUS_TradeSettlementInfoConfirming     =   4 ,  //正在进行交易结算结果确认
    CTPCONNSTATUS_Connected      =      6       ,            //连接登录成功
    CTPCONNSTATUS_Disconnecting  =      7       ,            //正在断开连接
    CTPCONNSTATUS_UnInit         =      8                    //未初始化
};

class CPlatFormParam
{
public:
    
public:
    CPlatFormParam()
    {
        TradeStatus=CTPCONNSTATUS_Disconnected;
        QuotStatus =CTPCONNSTATUS_Disconnected;
        RequestID=0;
		//PlatFormID = 0;
    };
    
public:
    std::vector<std::string>    TradeFrontAddrs;    //类似多个"asp-sim2-front1.financial-trading-platform.com:26205"
    std::vector<std::string>    QuotFrontAddrs;     //类似多个"58.246.49.130:41213"
    std::string                 BrokerID;
    std::string                 UserID;
    std::string                 UserPW;
    std::string                 InvestorID;      
    std::string                 InvestorPW;
    CTPCONNSTATUS               TradeStatus;
    CTPCONNSTATUS               QuotStatus;
    int                         RequestID;
	std::string                 OneTimePassword;
    Stru_ProxyServerParam       ProxyParam;
	//int						    PlatFormID;
};

class CPlatFormService
{
friend class CTraderSpi;
friend class CQuotSpi;
friend class CTradeThread;
friend class CQuotThread;
friend class CServiceProxy;

//交易接口
public:
	///用户口令更新请求
	int ReqUserPasswordUpdate(PlatformStru_UserPasswordUpdate *pUserPasswordUpdate, int nRequestID=0);

	///资金账户口令更新请求
	int ReqTradingAccountPasswordUpdate(PlatformStru_TradingAccountPasswordUpdate *pTradingAccountPasswordUpdate, int nRequestID=0);

	///报单录入请求. 返回时pInputOrder中的RrequestID、BrokerID、InvestorID、UserID、OrderRef的值被修改为底层确定的值
	int ReqOrderInsert(PlatformStru_InputOrder *pInputOrder, int nRequestID=0);

	///预埋单录入请求. 返回时pInputOrder中的RrequestID、BrokerID、InvestorID、UserID、OrderRef的值被修改为底层确定的值
	int ReqParkedOrderInsert(PlatformStru_ParkedOrder *pParkedOrder, int nRequestID=0);

	///预埋撤单录入请求
	int ReqParkedOrderAction(PlatformStru_ParkedOrderAction *pParkedOrderAction, int nRequestID=0);

	///报单操作请求(含撤单)
	int ReqOrderAction(PlatformStru_InputOrderAction *pInputOrderAction, int nRequestID=0);
	///报单操作请求(撤单)
	int ReqCancelOrder(const OrderKey& orderkey, int nRequestID=0);

	///查询最大报单数量请求
	int ReqQueryMaxOrderVolume(PlatformStru_QueryMaxOrderVolume *pQueryMaxOrderVolume, int nRequestID=0);

	///投资者结算结果确认
	int ReqSettlementInfoConfirm() ;

	///请求删除预埋单
	int ReqRemoveParkedOrder(PlatformStru_RemoveParkedOrder *pRemoveParkedOrder, int nRequestID=0) ;

	///请求删除预埋撤单
	int ReqRemoveParkedOrderAction(PlatformStru_RemoveParkedOrderAction *pRemoveParkedOrderAction, int nRequestID=0) ;

	///请求查询报单
	int ReqQryOrder(PlatformStru_QryOrder *pQryOrder, int nRequestID=0) ;

	///请求查询成交
	int ReqQryTrade(PlatformStru_QryTrade *pQryTrade, int nRequestID=0) ;

	///请求查询投资者持仓
	int ReqQryInvestorPosition(PlatformStru_QryInvestorPosition *pQryInvestorPosition, int nRequestID=0) ;

	///请求查询资金账户
	int ReqQryTradingAccount(PlatformStru_QryTradingAccount *pQryTradingAccount, int nRequestID=0) ;

	///请求查询投资者
	int ReqQryInvestor(PlatformStru_QryInvestor *pQryInvestor, int nRequestID=0) ;

	///请求查询交易编码
	int ReqQryTradingCode(CThostFtdcQryTradingCodeField *pQryTradingCode, int nRequestID=0) ;

	///请求查询合约保证金率
	int ReqQryInstrumentMarginRate(CThostFtdcQryInstrumentMarginRateField *pQryInstrumentMarginRate, int nRequestID=0) ;

	///请求查询合约手续费率
	int ReqQryInstrumentCommissionRate(CThostFtdcQryInstrumentCommissionRateField *pQryInstrumentCommissionRate, int nRequestID=0) ;

#ifdef CTP060300
	///请求查询期权合约手续费
	int ReqQryOptionInstrCommRate(CThostFtdcQryOptionInstrCommRateField *pQryOptionInstrCommRate, int nRequestID);
    ///请求查询期权交易成本
	int ReqQryOptionInstrTradeCost(CThostFtdcQryOptionInstrTradeCostField *pQryOptionInstrTradeCost, int nRequestID);
#endif
    ///订阅询价通知，OptionInstrumentIDs为空则订阅全部期权合约的询价通知
    int  SubscribeForQuoteRsp(const vector<string>& OptionInstrumentIDs);
    ///退订询价通知，OptionInstrumentIDs为空则退订全部合约的询价通知
    int UnSubscribeForQuoteRsp(const vector<string>& OptionInstrumentIDs);
    ///请求询价录入
    int ReqForQuoteInsert(PlatformStru_InputForQuoteField& InputForQuote, int nRequestID);
    ///执行宣告录入请求
	int ReqExecOrderInsert(PlatformStru_InputExecOrderField& InputExecOrder, int nRequestID);
    ///执行宣告操作请求
	int ReqExecOrderAction(PlatformStru_InputExecOrderActionField& InputExecOrderAction, int nRequestID);
    ///请求查询执行宣告
	int ReqQryExecOrder(PlatformStru_QryExecOrderField& QryExecOrder, int nRequestID);

	///请求查询交易所
	int ReqQryExchange(CThostFtdcQryExchangeField *pQryExchange, int nRequestID=0) ;

	///请求查询品种
	int ReqQryProduct(PlatformStru_QryProduct *pQryProduct, int nRequestID=0) ;

	///请求查询合约
	int ReqQryInstrument(PlatformStru_QryInstrument *pQryInstrument, int nRequestID=0) ;

	///请求查询行情
	int ReqQryDepthMarketData(PlatformStru_QryDepthMarketData *pQryDepthMarketData, int nRequestID=0) ;

	///请求查询投资者结算结果
	int ReqQrySettlementInfo(PlatformStru_QrySettlementInfo *pQrySettlementInfo, int nRequestID=0) ;

	///请求查询保证金监管系统经纪公司资金账户密钥
	int ReqQryCFMMCTradingAccountKey(PlatformStru_QryCFMMCTradingAccountKey *pQryCFMMCTradingAccountKey, int nRequestID=0) ;

	///请求查询转帐银行
	int ReqQryTransferBank(PlatformStru_QryTransferBank *pQryTransferBank, int nRequestID=0) ;

	///请求查询投资者持仓明细
	int ReqQryInvestorPositionDetail(PlatformStru_QryInvestorPositionDetail *pQryInvestorPositionDetail, int nRequestID=0) ;

	///请求查询客户通知
	int ReqQryNotice(PlatformStru_QryNotice *pQryNotice, int nRequestID=0) ;

	///请求查询结算信息确认
	int ReqQrySettlementInfoConfirm(PlatformStru_QrySettlementInfoConfirm *pQrySettlementInfoConfirm, int nRequestID=0) ;

	///请求查询投资者持仓明细
	int ReqQryInvestorPositionCombineDetail(PlatformStru_QryInvestorPositionCombineDetail *pQryInvestorPositionCombineDetail, int nRequestID=0) ;

	///请求查询转帐流水
	int ReqQryTransferSerial(PlatformStru_QryTransferSerial *pQryTransferSerial, int nRequestID=0) ;

	///请求查询签约银行
	int ReqQryContractBank(PlatformStru_QryContractBank *pQryContractBank, int nRequestID=0) ;
    
    ///请求查询银期签约关系
	int ReqQryAccountregister(PlatformStru_QryAccountRegister *pQryAccountregister, int nRequestID=0);

    ///请求查询汇率
    int ReqQryExchangeRate(PlatformStru_QryExchangeRate *pQryExchangeRate, int nRequestID);

	///请求查询预埋单
	int ReqQryParkedOrder(PlatformStru_QryParkedOrder *pQryParkedOrder, int nRequestID=0) ;

	///请求查询预埋撤单
	int ReqQryParkedOrderAction(PlatformStru_QryParkedOrderAction *pQryParkedOrderAction, int nRequestID=0) ;

	///请求查询交易通知
	int ReqQryTradingNotice(CThostFtdcQryTradingNoticeField *pQryTradingNotice, int nRequestID=0) ;

	///请求查询经纪公司交易参数
	int ReqQryBrokerTradingParams(CThostFtdcQryBrokerTradingParamsField *pQryBrokerTradingParams, int nRequestID=0) ;

	///请求查询经纪公司交易算法
	int ReqQryBrokerTradingAlgos(CThostFtdcQryBrokerTradingAlgosField *pQryBrokerTradingAlgos, int nRequestID=0) ;

	///期货发起银行资金转期货请求
	int ReqFromBankToFutureByFuture(PlatformStru_ReqTransfer *pReqTransfer, int nRequestID=0) ;

	///期货发起期货资金转银行请求
	int ReqFromFutureToBankByFuture(PlatformStru_ReqTransfer *pReqTransfer, int nRequestID=0) ;

	///期货发起查询银行余额请求
	int ReqQueryBankAccountMoneyByFuture(PlatformStru_ReqQueryAccount *pReqQueryAccount, int nRequestID=0) ;

//行情接口
public:
    ///向综合交易平台定制行情
    int SubscribeMarketData(const std::string& InstrumentID);

    ///向综合交易平台取消行情定制
    int UnSubscribeMarketData(const std::string& InstrumentID);

//控制管理接口    
public:
    int LoginTrade(const std::string& InvestorID, const std::string& InvestorPW, const std::string& InvestorNewPwd);
    int LogoutTrade();
    int LoginQuot(const std::string& InvestorID, const std::string& InvestorPW);
    int LogoutQuot();
    void StopThreads(void);
	///密码是否是当前密码
	bool IsValidInvestorPW(const string& yourPW);
	bool IsValidUserPW(const string& yourPW);
	int GetBrokerIDUserID(std::string& UserID, std::string& BrokerID,set<string>* accounts=NULL);
    int SetTradeFrontAddrs(const std::vector<std::string>& TradeAddr);
    int SetQuotFrontAddrs(const std::vector<std::string>& QuotAddr);
    int SetParticipantInfo(const std::string& BrokerID, const std::string& UserID, const std::string& UserPW, const std::string& OneTimePassword);   
	int SetProxyParam(const Stru_ProxyServerParam& ProxyParam);
//自定义接口
public:
    ///定制业务数据
    int SubscribeBusinessData(BusinessID BID, GUIModuleID GID, GuiCallBackFunc callback, bool sendCurrentInfo=false);

    ///取消业务数据的定制
    int UnSubscribeBusinessData(BusinessID BID, GUIModuleID GID);

    ///获取合约列表
    int GetInstrumentList(std::set<std::string> &outData,std::string ExchangeID="");
    int GetInstrumentList(vector<string> &outData,string ExchangeID="");
	int GetInstrumentList(std::vector<InstrumentGroupInfo> &outData);
    ///添加主力合约列表
    void AddMainInstrumentList(std::string instrument);
    ///获取主力合约列表
    int GetMainInstrumentList(std::set<std::string> &outData);
	///设置合约容差列表
	void SetInstrumentVarietyMap(map<string, string>& inData);
	// 获取合约容差列表
	int GetInstrumentVarietyMap(map<string, string>& outData);
	///获取指定品种的合约列表,返回合约个数
	int GetInstrumentListByProductID(const string& ProductID,set<string> &outData);
	int GetInstrumentListByProductID(const string& ProductID,vector<string> &outData);
    ///获取指定合约信息
    int GetInstrumentInfo(const std::string& InstrumentID, PlatformStru_InstrumentInfo& outData);
    bool GetLegInstrumentID(const string& strComInstrumentID,
        string& strLeg1InstrumentID,
        string& strLeg2InstrumentID);
    ///设置指定合约信息
    void SetInstrumentInfo(const std::string& InstrumentID, PlatformStru_InstrumentInfo& outData,bool bLast);
    ///获取合约的产品类型，失败返回-1
    char GetProductClassType(const std::string& InstrumentID);
    ///获取合约的ProductID
    string GetProductID(const string& strInstrumentID);
    string GetExchangeID(const string& strInstrumentID);

    ///设置指定品种信息
    void SetProductInfo(const string& ProductID, PlatformStru_ProductInfo& outData);
    ///获取品种列表
    int GetProductList(vector<string> &outData,const string& ExchangeID="");

    ///获取包含此单腿合约的组合合约列表
    bool GetCombInstrumentIDs_IncludeLeg(const std::string& LegInstrument,std::vector<std::string>& vecCombInstruments);
    //设置合约订阅状态
	void SetSubscribeStatus(const std::string& InstrumentID,int GID,SubscribeMarketDataOper oper=eSubscribeMarketData);
	//退订GID对应的全部合约行情
	void UnsubscribeMarketDataOfGID(int GID);
	//检查GID是否订阅了指定合约的行情
	bool IsSubscribeMarketDataOfGID(const string& InstrumentID,int GID);
    ///获取指定交易所的所有品种-合约
    int GetProductID_InstrumentIDsByExchangeID(std::map<std::string, std::set<std::string> >& outData,std::string ExchangeID="");    
    ///获取全部交易所的品种合约ID vector<pair<ExchangeID,vector<pair<ProductID,vector<InstrumentID>>>>>
    void GetExchangeID_ProductID_InstrumentIDs(vector<pair<string,vector<pair<string,vector<string>>>>>& outData);
    ///获取全部交易所的品种信息 vector<pair<ExchangeID,vector<PlatformStru_ProductInfo>>>
    void GetExchangeID_ProductInfos(vector<pair<string,vector<PlatformStru_ProductInfo>>>& outData);
    bool GetProductInfo(const string& strInstrumentID,PlatformStru_ProductInfo& outData);
    bool GetProductInfo2(const string& strProductID,PlatformStru_ProductInfo& outData);
    //获取指定交易所的期权标的物期货品种
    int GetOptionProductIDsByExchangeID(const string& ExchangeID,vector<string>& outProductIDs);
    //获取指定标的物期货合约对应的期权合约ID，返回目标期权合约的数量。UnderlyingInstrumentID为空则返回全部期权合约
    int GetOptionInstrumentIDsByUnderlyingInstrumentID(const string& UnderlyingInstrumentID,vector<string>& outOptionInstrumentIDs);
    //获取指定标的物期货合约对应的看涨期权合约ID数组和看跌期权合约ID数组。UnderlyingInstrumentID为空则返回全部期权合约
    void GetOptionInstrumentIDsByUnderlyingInstrumentID(const string& UnderlyingInstrumentID,vector<string>& outCallOptionInstrumentIDs,vector<string>& outPutOptionInstrumentIDs);
    //获取所有标的物期货合约
    int GetAllOptionUnderlyingInstrumentIDs(vector<string>& outUnderlyingInstrumentIDs);
    int GetAllOptionUnderlyingInstrumentIDs(set<string>& outUnderlyingInstrumentIDs);
    //判断是否是期权标的物期货合约
    bool IsUnderlyingInstrumentID(const string& InstrumentID);

    ///获取合约手续费率
    int GetCommissionRate(const std::string& InstrumentID, PlatformStru_InstrumentCommissionRate& outData);
    bool IsCommissionRateExist(const string& InstrumentID);
    ///设置合约手续费率
    int SetCommissionRate(const std::string& InstrumentID, PlatformStru_InstrumentCommissionRate& outData);  
    ///设置正在查询手续费率的合约
    void SetReqCommissionRateInstrumentID(const std::string& InstrumentID);
    ///获取合约保证金率
    int GetMarginRate(const std::string& InstrumentID, PlatformStru_InstrumentMarginRate& outData);
    bool IsMarginRateExist(const string& InstrumentID);
    ///获取合约保证金率
    int SetMarginRate(const std::string& InstrumentID, PlatformStru_InstrumentMarginRate& outData);  
    ///获取合约乘数，成功返回合约乘数，失败返回-1
    int GetInstrumentMultiple(const std::string& InstrumentID);


    ///获取指定合约行情
    int GetQuotInfo(const std::string& InstrumentID, PlatformStru_DepthMarketData& outData);
    ///获取指定合约旧行情
    int GetOldQuotInfo(const std::string& InstrumentID, PlatformStru_DepthMarketData& outData);
    ///获取指定合约的现价，失败返回无效值
    double GetCurPrice(const std::string& InstrumentID);


    bool HavePositionDetail(const std::string& strInstrumentID);
    bool HaveCombPositionDetail();
    void GetDerivedInstrumentID_OnCloseTrade(set<string>& InstrumentIDs);

    int GetPositions2(const std::string& strInstrument,
                        std::set<long>& setFTID,
                        std::vector<PlatformStru_Position>& outData,
                        long& lastseq);
    int GetPositions3(const std::string& strInstrument,
                        std::vector<PlatformStru_Position>& outData,
                        long& lastseq);
    int GetPositionDetails3(const std::string& strInstrument,
                              std::set<long>& setFTID,
                              std::vector<PlatformStru_PositionDetail>& vecValue,
                              long& lastseq);
    int GetPositionCombs2(const std::string& strInstrument,std::vector<PlatformStru_Position>& outData);

    int GetPositions(std::vector<PlatformStru_Position>& outData);
    int GetPositionDetails(std::vector<PlatformStru_PositionDetail>& outData,long& lastseq);
    int GetPositionCombs(std::vector<PlatformStru_Position>& outData);


    //获取持仓记录键值列表,返回持仓记录的数量
    int GetPositionKeySet(std::set<PositionKey> &PositionKeySet);
    //获取指定合约、方向、投保的持仓数据，成功返回0，失败返回-1
    int GetPositionData(const std::string& strAccount, const std::string& InstrumentID,const char Direction,const char HedgeFlag,PlatformStru_Position& PositionData);

    ///设置当前显示的持仓内容。1:持仓；2:持仓明细；3:组合持仓
    void SetCurrentPositionContent(int PositionContentMode);

	string GetTradingDay();
	bool IsTodayPosition( const char* pOpenData );
	
    ///获取交易所时间
    unsigned long GetExchangeTime(const string& ExchangeID,string& time);
    ///获取交易所日内交易时段, 返回交易时段起始时间对的数组，如{pair("0915","1130"),pair("1300","1515")}等
    vector<pair<string,string>> GetTradingTimespan(const string& ExchangeID);
    ///获取全部交易所
    int GetExchangeIDs(vector<string>& outData);
    ///获取全部报单
    int GetAllOrders(std::vector<PlatformStru_OrderInfo>& outData);
    ///获取全部报单
    int GetAllOrders2(const std::string& strInstrument,std::vector<PlatformStru_OrderInfo>& outData);
    ///获取指定报单
    bool GetOrder(const OrderKey& inOrderKey,PlatformStru_OrderInfo& outData);
    bool GetOrder2(const string& strOrderSysID,PlatformStru_OrderInfo& outData);

    ///获取全部已触发的报单
    int GetTriggerOrders(std::vector<PlatformStru_OrderInfo>& outData);
    ///获取合约相关的已触发的报单
    int GetTriggerOrders2(const std::string& strInstrument,std::vector<PlatformStru_OrderInfo>& outData);
    ///获取指定已触发的报单
    bool GetTriggerOrder(const OrderKey& orderkey,PlatformStru_OrderInfo& outData);

    ///获取已成交报单
    int GetTradedOrders(std::vector<PlatformStru_OrderInfo>& outData);
    ///获取已成交报单
    int GetTradedOrders2(const std::string& strInstrument,std::vector<PlatformStru_OrderInfo>& outData);
    ///获取指定已成交报单
    bool GetTradedOrder(const OrderKey& orderkey,PlatformStru_OrderInfo& outData);

    ///获取已撤单和错误报单
    int GetCanceledOrders(std::vector<PlatformStru_OrderInfo>& outData);
    ///获取已撤单和错误报单
    int GetCanceledOrders2(const std::string& strInstrument,std::vector<PlatformStru_OrderInfo>& outData);
    ///获取指定已撤单和错误报单
    bool GetCanceledOrder(const OrderKey& orderkey,PlatformStru_OrderInfo& outData);

    ///获取未成交报单
    int GetWaitOrders(std::vector<PlatformStru_OrderInfo>& outData);
    ///获取未成交报单
    int GetWaitOrders3(const std::string& strInstrument,std::vector<PlatformStru_OrderInfo>& outData);
    ///获取指定合约相关的未成交报单, 不包含手工审核中的报单，合约是单合约，报单是对应报单，或包含该合约的组合报单
    int GetWaitOrders2(const std::string& strInstrument,std::vector<PlatformStru_OrderInfo>& outData);
    ///获取指定未成交报单
    bool GetWaitOrder(const OrderKey& orderkey,PlatformStru_OrderInfo& outData);


    int GetWaitOrderVolume(const std::string& strAccount, const std::string &strInstrumentID, const char Direction, char CloseType,const char HedgeFlag=THOST_FTDC_HF_Speculation);
    //获取指定合约指定方向的平仓挂单的平仓量，返回0表示成功，<0表示失败。成功时CloseVolume返回平仓单(含强平和本地强平)的手数，CloseTodayVolume返回平今单手数，CloseYesterdayVolume表示平昨单手数
    int GetCloseOrderVolume(const std::string& strAccount,const std::string &strInstrumentID, const char& Direction,int& CloseVolume,int& CloseTodayVolume,int& CloseYesterdayVolume,const char HedgeFlag=THOST_FTDC_HF_Speculation);

    ///获取全部成交单
    int GetAllTrades(std::vector<PlatformStru_TradeInfo>& outData);
    ///获取指定成交信息
    bool GetTradeInfo(const TradeKey& tradekey, PlatformStru_TradeInfo& outData);
    ///获取指定成交信息
    int GetTradesOfInstrument(const std::string& strInstrument,std::vector<PlatformStru_TradeInfo>& outData);
    int GetTradeBriefsOfInstrument(const std::string& strInstrument,std::vector<PlatformStru_TradeInfoBrief>& outData);
    ///获取全部成交统计记录
    int GetAllTradeTotals(std::vector<PlatformStru_TradeTotalInfo>& outData);
    ///获取指定合约的成交统计记录成功返回0，失败返回-1
    int GetTradeTotalOfInstrument(const std::string& strInstrument, std::vector<PlatformStru_TradeTotalInfo>& outData);
    ///获取成交统计
    int GetAllTradeTotalDatas(vector<TotalInfo>& outData);
	///在成交统计查找参数rawData
	int FindIndexFromAllTradeTotalDatas(const PlatformStru_TradeInfo& rawData );

    ///获取交易资金账户信息
	int GetTradingAccountWithdrawQuota(double& fWithdrawQuota);
	int GetTradingAccountAvailable(double& fAvailable);
	int GetTradingAccountID(char* AccountID,int rltsize);
    int GetTradingAccount(const std::string& strAccount, PlatformStru_TradingAccountInfo& outData);
	///获取账户资金文本信息
    int GetAccountText(std::string& outData,int language);

    ///请求查询投资者结算结果响应
    int GetLastSettlementInfo(std::string& outData);
    void GetMarketDataInstrumentID(std::set<std::string>& setMarketDataInstrumentID);
	void SetOrderRef(int orderref){m_CurOrderRef=orderref;}
    //获取客户签约银行信息
    int GetContractBank(std::map<std::string,  PlatformStru_ContractBank>& outData);

    //获取币种信息
    vector<string> GetCurrencys(const string& BankName,bool bAddUSD=true,bool bAddCNY=true);
    vector<string> GetCurrencys(bool bAddUSD=true,bool bAddCNY=true);

    CTPCONNSTATUS GetTradeStatus(void);


    CTPCONNSTATUS GetQuotStatus(void);


    std::string GetTradeBrokerID(void);
    std::string GetTradeInvestorID(void);
	//int GetPlatFormID();

    //判断是否需要查询新合约的费率
    bool IsNeedCheckCommissionRateAndMarginRate(void);

    //清除需要查询新合约费率的标志
    void SetNeedCheckCommissionRateAndMarginRate(bool bNeedCheck);
	//

	//
	bool IsSettlementInfoConfirmed();
	//
	void GetErrorField(int& ErrorID){ErrorID=m_ErrorInfoField.ErrorID;}
	void GetErrorField(string& ErrMsg){ErrMsg=m_ErrorInfoField.ErrorMsg;}
	void SetReqID(int nOrderReqID) {
#ifndef __PLATFORM_IB_
		m_nOrderReqID = nOrderReqID;
#endif
	};

	long GetReqID() {
#ifdef __PLATFORM_IB_
		if(m_pTradeApi != NULL)
			return m_pTradeApi->GetOrderID();
		else
			return -1;
#else
		return m_nOrderReqID;
#endif
	};

	long GetNextReqID() {
#ifdef __PLATFORM_IB_
		if(m_pTradeApi != NULL)
			return m_pTradeApi->GetNextOrderID();
		else
			return -1;
#else
		return ++m_nOrderReqID;
#endif
	};
	SERVER_PARAM_CFG&  GetServerParamCfg();
    //void SetModuleDataQry(bool bQry);
    //bool GetModuleDataQry();

    //UI层通知底层，初始化查询开始或完成
    void NotifyInitQryStart();
    void NotifyInitQrySucc();

	//为插件添加以下接口
	//获取委托单列表FTID
	int GetAllOrderFTIDList(std::vector<long>& vec);
	//获取委托单详情
	int GetAllOrderInfo(long lFTID, PlatformStru_OrderInfo& outData);
	int GetAllOrderInfo(OrderKey key, PlatformStru_OrderInfo& outData);

	//获取持仓列表FTID
	int GetPositionFTIDList(std::vector<long>& vec);
	//获取持仓详情
	int GetPositionInfo(long lFTID, PlatformStru_Position& outData);
	int GetPositionInfo(PositionKey key, PlatformStru_Position& outData);

	//获取组合持仓列表FTID
	int GetPositionCombFTIDList(std::vector<long>& vec);
	//获取组合持仓详情
	int GetPositionCombInfo(long lFTID, PlatformStru_Position& outData);

    //获取交易连接的FrontID和SessionID。这两个值在交易登录时由ctp返回
    const PlatformStru_LoginInfo& GetTradingLoginInfo();

    ///DataCenter是否已经和底层同步上，可以开始初始化查询了
    bool IsDataCenterReady(void);

private:
    CPlatFormService(CServiceProxy& rServiceProxy);
    ~CPlatFormService();    


    ///用户登录请求
	int ReqUserLogin(CThostFtdcReqUserLoginField *pReqUserLoginField, int nRequestID=0);	

	///登出请求
	int ReqUserLogout(CThostFtdcUserLogoutField *pUserLogout, int nRequestID=0);

    zqWriteLog*              m_pWriteLog;

    CThostFtdcTraderApi*    m_pTradeApi;    //交易接口对象，由综合交易平台的接口提供
    CTraderSpi*             m_pTradeSpi;    //交易接口回调对象
    CThostFtdcMdApi*        m_pQuotApi;     //行情接口对象，由综合交易平台的接口提供
    CQuotSpi*               m_pQuotSpi;     //行情接口回调对象
    CTradeThread*           m_pTradeWorkThread; //交易工作线程
    CQuotThread*            m_pQuotWorkThread;  //行情工作线程
    CPackageCache*          m_PCache;       //CTraderSpi与CQuotSpi将交易所的返回的数据保存到此cache中，
                                            //CDataCenter读取此cache
    CDataCenter*            m_pDataCenter;  //数据中心，负责读取m_PCache中的业务数据，并根据定制信息
                                            //调用对应的回调函数
	int				        m_CurOrderRef;//当前报单引用编号

    int                     m_CurForQuoteRef;           //期权：询价Ref的当前编号
    int                     m_CurExecOrderRef;          //期权：执行宣告Ref的当前编号
    int                     m_CurExecOrderActionRef;    //期权：执行宣告操作Ref的当前编号

    set<string>             m_setOptionInstrumentIDs_SubscribeForQuoteRsp;//期权：当前订阅了询价通知的期权合约ID

    std::set<std::string> m_MarketDataInstrumentID;
    enum PLATFORM_STATUS
    {
        PLATFORM_STATUS_UNINIT,
        PLATFORM_STATUS_INITED
    };
    int                     m_status;       //平台的当前状态

	CThostFtdcRspInfoField  m_ErrorInfoField;
	
	int						m_nOrderReqID;
	multimap<string, int>   m_SubscribeMap;       //订阅该合约行情的GID

    CRITICAL_SECTION m_CS;

public:
    CPlatFormParam          m_PlatformParam;//平台的连接
	bool					m_bSettlementInfoConfirmed;

public:
    bool                    m_bInQry;             //是否在查询途中

public:
	CServiceProxy& m_rServiceProxy;


};


#endif

